// Program 1: Count the Number of Digits in a Number
#include <iostream>
#include <cmath>

using namespace std;

/*
This function takes an integer 'n' as input and returns the count of digits in the number.
*/
int countDigits(int n) {
    return (int)(log10(n) + 1);
}

int main() {
    int num = 1234;
    int digitCount = countDigits(num);
    cout << "Number of digits in " << num << " is: " << digitCount << endl;
    return 0;
}

// Program 2: Reverse a Number
#include <iostream>

using namespace std;

/*
This function takes an integer 'n' as input and reverses the digits of the number.
It returns the reversed number.
*/
int reverseNumber(int n) {
    int reverse = 0;
    while (n > 0) {
        int lastDigit = n % 10;
        n = n / 10;
        reverse = (reverse * 10) + lastDigit;
    }
    return reverse;
}

int main() {
    int num = 1227;
    int reversedNum = reverseNumber(num);
    cout << "Reverse of " << num << " is: " << reversedNum << endl;
    return 0;
}

// Program 3: Check if a Number is a Palindrome
#include <iostream>

using namespace std;

/*
This function takes an integer 'n' as input and checks if it is a palindrome number.
It returns true if the number is a palindrome, false otherwise.
*/
bool isPalindrome(int n) {
    int dupi = n;
    int reverse = 0;
    while (n > 0) {
        int lastDigit = n % 10;
        n = n / 10;
        reverse = (reverse * 10) + lastDigit;
    }
    return (dupi == reverse);
}

int main() {
    int userNum;
    cout << "Enter a number: ";
    cin >> userNum;
    if (isPalindrome(userNum))
        cout << userNum << " is a palindrome number." << endl;
    else
        cout << userNum << " is not a palindrome number." << endl;
    return 0;
}

// Program 4: Check if a Number is an Armstrong Number
#include <iostream>
#include <cmath>

using namespace std;

/*
This function takes an integer 'n' as input and checks if it is an Armstrong number.
It returns true if the number is an Armstrong number, false otherwise.
*/
bool isArmstrong(int n) {
    int dupi = n;
    int sum = 0;
    int numDigits = floor(log10(n) + 1);

    while (n > 0) {
        int lastDigit = n % 10;
        n = n / 10;
        sum += pow(lastDigit, numDigits);
    }

    return (dupi == sum);
}

int main() {
    int num = 92727;
    if (isArmstrong(num))
        cout << num << " is an Armstrong number." << endl;
    else
        cout << num << " is not an Armstrong number." << endl;
    return 0;
}

// Program 5: Check if a Number is Prime
#include <iostream>

using namespace std;

/*
This function takes an integer 'num' as input and checks if it is a prime number.
It returns true if the number is prime, false otherwise.
*/
bool isPrime(int num) {
    if (num <= 1)
        return false; // 0 and 1 are not prime

    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0)
            return false; // Divisible by a number other than 1 and itself
    }

    return true; // If we reach here, it's prime
}

int main() {
    int number;
    cout << "Enter a number: ";
    cin >> number;

    if (isPrime(number))
        cout << number << " is a prime number." << endl;
    else
        cout << number << " is not a prime number." << endl;

    return 0;
}

// Program 6: LeetCode Problem - Add Digits
#include <iostream>

using namespace std;

/*
This function takes an integer 'n' as input and applies the "Add Digits" logic repeatedly
until the sum of digits becomes a single-digit number.
It returns the final single-digit sum.
*/
int addDigits(int n) {
    int sum;
    do {
        sum = 0;
        while (n > 0) {
            int lastDigit = n % 10;
            sum += lastDigit;
            n /= 10;
        }
        if (sum >= 10)
            n = sum;
    } while (sum >= 10);

    return sum;
}

int main() {
    int num = 199;
    int result = addDigits(num);
    cout << "The sum of digits for " << num << " is: " << result << endl;
    return 0;
}

// Program 7: Find All Divisors of a Number
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

/*
This function takes an integer 'n' as input and finds all the divisors of the number.
It returns a vector containing all the divisors.
*/
vector<int> findDivisors(int n) {
    vector<int> divisors;
    for (int i = 1; i <= sqrt(n); i++) {
        if (n % i == 0) {
            divisors.push_back(i);
            if ((n / i) != i)
                divisors.push_back(n / i);
        }
    }
    return divisors;
}

int main() {
    int num = 6;
    vector<int> divisors = findDivisors(num);
    cout << "Divisors of " << num << " are: ";
    for (int divisor : divisors)
        cout << divisor << " ";
    cout << endl;
    return 0;
}

// Program 8: Find the Greatest Common Divisor (GCD) of Two Numbers
#include <iostream>

using namespace std;

/*
This function takes two integers 'n1' and 'n2' as input and finds the greatest common divisor
(GCD) of the two numbers using the Euclidean algorithm.
It returns the GCD.
*/
int gcd(int n1, int n2) {
    while (n2 != 0) {
        int temp = n2;
        n2 = n1 % n2;
        n1 = temp;
    }
    return n1;
}

int main() {
    int num1 = 4;
    int num2 = 8;
    int greatest_common_divisor = gcd(num1, num2);
    cout << "The GCD of " << num1 << " and " << num2 << " is: " << greatest_common_divisor << endl;
    return 0;
}